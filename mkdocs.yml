# Project information
site_name: Ludwig
site_description: "Declarative machine learning: End-to-end machine learning pipelines using data-driven configurations."
site_author: Piero Molino
site_url: https://ludwig.ai/

# Repository
repo_name: ludwig-ai/ludwig
repo_url: https://github.com/ludwig-ai/ludwig
edit_uri: https://github.com/ludwig-ai/ludwig-docs/edit/master/docs/

# Copyright
copyright: Copyright &copy; 2018 - 2020 Uber Technologies Inc., 2021 - 2022 Linux Foundation Data & AI

# Navigation
nav:
  - Ludwig: index.md
  - üöÄ Getting Started:
      - Getting Started: getting_started/index.md
      - Installation: getting_started/installation.md
      - Dataset preparation: getting_started/prepare_data.md
      - Training: getting_started/train.md
      - Prediction and Evaluation: getting_started/evaluate.md
      - Hyperopt: getting_started/hyperopt.md
      - Serving: getting_started/serve.md
      - Distributed training on Ray: getting_started/ray.md
      - LLM Fine-tuning: getting_started/llm_finetuning.md
      - Ludwig with Docker: getting_started/docker.md
  - üìñ User Guide:
      - User Guide: user_guide/index.md
      - What is Ludwig?: user_guide/what_is_ludwig.md
      - How Ludwig Works: user_guide/how_ludwig_works.md
      - Command Line Interface: user_guide/command_line_interface.md
      - Python API:
          - LudwigModel: user_guide/api/LudwigModel.md
          - Visualization: user_guide/api/visualization.md
      - Datasets:
          - Supported Formats: user_guide/datasets/supported_formats.md
          - Data Preprocessing: user_guide/datasets/data_preprocessing.md
          - Data Postprocessing: user_guide/datasets/data_postprocessing.md
          - Dataset Zoo: user_guide/datasets/dataset_zoo.md
      - Large Language Models:
          - Large Language Models: user_guide/llms/index.md
          - Fine-Tuning: user_guide/llms/finetuning.md
          - In-Context Learning: user_guide/llms/in_context_learning.md
          - Text Classification: user_guide/llms/text_classification.md
      - GPUs: user_guide/gpus.md
      - Distributed Training:
          - Distributed Training: user_guide/distributed_training/index.md
          - Fine-Tuning Pretrained Models: user_guide/distributed_training/finetuning.md
      - Hyperparameter Optimization: user_guide/hyperopt.md
      - Cloud Storage: user_guide/cloud_storage.md
      - AutoML: user_guide/automl.md
      - Visualizations: user_guide/visualizations.md
      - Model Export: user_guide/model_export.md
      - Serving: user_guide/serving.md
      - Third-Party Integrations: user_guide/integrations.md
  - üìö Configuration:
      - Configuration: configuration/index.md
      - Model Types: configuration/model_type.md
      - Large Language Models: configuration/large_language_model.md
      - Preprocessing: configuration/preprocessing.md
      - Features:
          - Supported Data Types: configuration/features/supported_data_types.md
          - Input Features (‚Üë): configuration/features/input_features.md
          - Output Features (‚Üì): configuration/features/output_features.md
          - ‚áÖ Binary Features: configuration/features/binary_features.md
          - ‚áÖ Number Features: configuration/features/number_features.md
          - ‚áÖ Category Features: configuration/features/category_features.md
          - ‚áÖ Bag Features: configuration/features/bag_features.md
          - ‚áÖ Set Features: configuration/features/set_features.md
          - ‚áÖ Sequence Features: configuration/features/sequence_features.md
          - ‚áÖ Text Features: configuration/features/text_features.md
          - ‚áÖ Vector Features: configuration/features/vector_features.md
          - ‚Üë Audio Features: configuration/features/audio_features.md
          - ‚Üë Date Features: configuration/features/date_features.md
          - ‚Üë H3 Features: configuration/features/h3_features.md
          - ‚áÖ Image Features: configuration/features/image_features.md
          - ‚Üë Time Series Features: configuration/features/time_series_features.md
      - Defaults: configuration/defaults.md
      - Combiner: configuration/combiner.md
      - Trainer: configuration/trainer.md
      - Hyperopt: configuration/hyperparameter_optimization.md
      - Backend: configuration/backend.md
  - üí° Examples:
      - Examples: examples/index.md
      - LLMs:
          - Fine-tuning for classification: examples/llms/llm_classification.md
          - Instruction-tuning llama-2-7b: examples/llms/llm_finetuning.md
          - Adapter-based encoder fine-tuning for text classification with deepspeed: examples/llms/llm_finetuning_deepspeed.md
          - Adapter-based fine-tuning for text generation: examples/llms/llm_text_generation.md
          - Zero-shot batch inference for text generation: examples/llms/llm_zero_shot_text_generation.md
          - Zero-shot batch inference for text classification: examples/llms/llm_zero_shot_batch_inference.md
          - Few-shot batch inference for text classification (RAG): examples/llms/llm_few_shot_batch_inference.md
          - Zero-shot batch inference for tabular classification (TabLLM): examples/llms/llm_tabular_zero_shot_batch_inference.md
          - Fine-tuning for tabular classification (TabLLM): examples/llms/llm_tabular_classification.md
      - Supervised ML:
          - Text Classification: examples/text_classification.md
          - Tabular Data Classification: examples/adult_census_income.md
          - Image Classification: examples/mnist.md
          - Multimodal Classification: examples/multimodal_classification.md
          - Hyperparameter Optimization: examples/hyperopt.md
          - Fraud with GBMs: examples/gbm_fraud.md
          - Sentiment Analysis: examples/sentiment_analysis.md
      - Use Cases:
          - Named Entity Recognition Tagging: examples/ner_tagging.md
          - Natural Language Understanding: examples/nlu.md
          - Machine Translation: examples/machine_translation.md
          - Chit-Chat Dialogue Modeling through Sequence2Sequence: examples/seq2seq.md
          - Sentiment Analysis: examples/sentiment_analysis.md
          - One-shot Learning with Siamese Networks: examples/oneshot.md
          - Visual Question Answering: examples/visual_qa.md
          - Spoken Digit Speech Recognition: examples/speech_recognition.md
          - Speaker Verification: examples/speaker_verification.md
          - Binary Classification (Titanic): examples/titanic.md
          - Timeseries forecasting: examples/forecasting.md
          - Timeseries forecasting (Weather): examples/weather.md
          - Movie rating prediction: examples/movie_ratings.md
          - Multi-label classification: examples/multi_label.md
          - Multi-Task Learning: examples/multi_task.md
          - Simple Regression - Fuel Efficiency Prediction: examples/fuel_efficiency.md
          - Fraud Detection: examples/fraud.md
  - üõ†Ô∏è Developer Guide:
      - Developer Guide: developer_guide/index.md
      - How to Contribute: developer_guide/contributing.md
      - Codebase Structure: developer_guide/codebase_structure.md
      - Ludwig API Guarantees: developer_guide/api_annotations.md
      - Add an Encoder: developer_guide/add_an_encoder.md
      - Add a Combiner: developer_guide/add_a_combiner.md
      - Add a Decoder: developer_guide/add_a_decoder.md
      - Add a Feature Type: developer_guide/add_a_feature_type.md
      - Add a Metric: developer_guide/add_a_metric.md
      - Add a Loss Function: developer_guide/add_a_loss_function.md
      - Add a Tokenizer: developer_guide/add_a_tokenizer.md
      - Add a Hyperopt Algorithm: developer_guide/add_a_hyperopt.md
      - Add a Pretrained Model: developer_guide/add_a_pretrained_model.md
      - Add an Integration: developer_guide/add_an_integration.md
      - Add a Dataset: developer_guide/add_a_dataset.md
      - Style Guidelines and Tests: developer_guide/style_guidelines_and_tests.md
      - Unit Test Design Guidelines: developer_guide/unit_test_design_guidelines.md
      - Run Tests on GPU Using Ray: developer_guide/run_tests_on_gpu_using_ray.md
      - Release Process: developer_guide/release_process.md
  - üëã Community: community.md
  - ‚ùì FAQ: faq.md

# Configuration
site_dir: ../docs/
theme:
  name: material
  language: en
  logo: images/ludwig_logo.svg
  favicon: favicon.ico
  custom_dir: custom/
  palette:
    - media: "(prefers-color-scheme: light)" # (1)!
      scheme: default
      accent: deep orange
      primary: grey
      toggle:
        icon: material/toggle-switch-off-outline
        name: Switch to dark mode
    - media: "(prefers-color-scheme: dark)" # (2)!
      scheme: slate
      accent: deep orange
      primary: grey
      toggle:
        icon: material/toggle-switch
        name: Switch to light mode
  features:
    - navigation.indexes
    - navigation.tabs.sticky

# Customization
extra_css:
  - "stylesheets/extra.css"
  - "stylesheets/monokai.css"
  - "stylesheets/colorful.css"

# Extensions
markdown_extensions:
  - admonition
  - toc:
      permalink: true
      baselevel: 2
  - abbr
  - attr_list
  - pymdownx.snippets
  - md_in_html
  - pymdownx.details
  - pymdownx.emoji
  - pymdownx.superfences
  - pymdownx.highlight:
      extend_pygments_lang:
        - name: pycon3
          lang: pycon
          options:
            python3: true
      linenums_style: pymdownx-inline
  - pymdownx.tabbed:
      alternate_style: true
  - footnotes
  - meta
  - tables
  - def_list
  - attr_list
  - pymdownx.emoji:
      emoji_index: !!python/name:materialx.emoji.twemoji
      emoji_generator: !!python/name:materialx.emoji.to_svg
  - pymdownx.superfences:
      custom_fences:
        - name: mermaid
          class: mermaid
          format: !!python/name:pymdownx.superfences.fence_code_format

extra:
  version:
    provider: mike
    default: latest
  analytics:
    provider: google
    property: G-H8VVJF9L6G

plugins:
  - search
  - macros
  - mike:
      # these fields are all optional; the defaults are as below...
      version_selector: true # set to false to leave out the version selector
      css_dir: css # the directory to put the version selector's CSS
      javascript_dir: js # the directory to put the version selector's JS
      canonical_version:
        latest # the version for <link rel="canonical">; `null`
        # uses the version specified via `mike deploy`
